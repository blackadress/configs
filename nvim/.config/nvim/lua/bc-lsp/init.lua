local saga = require("lspsaga")

saga.setup({})

-- lsp-install
require("mason").setup({})
require("mason-lspconfig").setup({})

-- local lspconfig = require("lspconfig")
--
-- local config = require("utils").VARS
--
-- lspconfig.angularls.setup({})
-- lspconfig.bashls.setup({})
-- lspconfig.emmet_ls.setup({})
-- lspconfig.gopls.setup({})
-- require("lspconfig").omnisharp.setup({
--   cmd = { config["OMNISHARP"] },
--
--   settings = {
--     FormattingOptions = {
--       -- Enables support for reading code style, naming convention and analyzer
--       -- settings from .editorconfig.
--       EnableEditorConfigSupport = true,
--       -- Specifies whether 'using' directives should be grouped and sorted during
--       -- document formatting.
--       OrganizeImports = nil,
--     },
--     MsBuild = {
--       -- If true, MSBuild project system will only load projects for files that
--       -- were opened in the editor. This setting is useful for big C# codebases
--       -- and allows for faster initialization of code navigation features only
--       -- for projects that are relevant to code that is being edited. With this
--       -- setting enabled OmniSharp may load fewer projects and may thus display
--       -- incomplete reference lists for symbols.
--       LoadProjectsOnDemand = nil,
--     },
--     RoslynExtensionsOptions = {
--       EnableDecompilationSupport = true,
--       -- Enables support for roslyn analyzers, code fixes and rulesets.
--       EnableAnalyzersSupport = true,
--       -- Enables support for showing unimported types and unimported extension
--       -- methods in completion lists. When committed, the appropriate using
--       -- directive will be added at the top of the current file. This option can
--       -- have a negative impact on initial completion responsiveness,
--       -- particularly for the first few completion sessions after opening a
--       -- solution.
--       EnableImportCompletion = true,
--       -- Only run analyzers against open files when 'enableRoslynAnalyzers' is
--       -- true
--       AnalyzeOpenDocumentsOnly = nil,
--     },
--     Sdk = {
--       -- Specifies whether to include preview versions of the .NET SDK when
--       -- determining which version to use for project loading.
--       IncludePrereleases = true,
--     },
--   },
-- })
-- lspconfig.pyright.setup({})
-- lspconfig.rust_analyzer.setup({
--   settings = {
--     ["rust-analyzer"] = {
--       checkOnSave = {
--         allFeatures = true,
--         overrideCommand = {
--           "cargo",
--           "clippy",
--           "--workspace",
--           "--message-format=json",
--           "--all-targets",
--           "--all-features",
--         },
--       },
--     },
--   },
-- })
-- lspconfig.sqlls.setup({})
-- lspconfig.lua_ls.setup({
--   settings = lua_settings,
-- })
-- lspconfig.texlab.setup({})
-- lspconfig.ts_ls.setup({
--   --[[ on_attach = function(client, _)
--     client.server_capabilities.semanticTokensProvider = nil
--   end, ]]
-- })
-- -- vim.lsp.enable("astro")
-- -- lspconfig.astro.setup({})
-- -- lspconfig.clangd.setup()
-- lspconfig.jdtls.setup({})
--
-- -- require("bc-lsp/lspsaga_config")
